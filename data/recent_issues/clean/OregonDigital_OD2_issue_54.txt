IIIF Configuration
Descriptive summary RIIIF Needs to be configured early on to verify that derivatives are being processed properly.  A Ruby IIIF image server as a rails engine This is a good solution early on, while the systems team configures and sets up the servers and configurations needed to get this working with Amazon S3 and a bunch of other different file systems and servers. To configure RIIIF in OD2 Follow these steps.  Add RIIIF gem to gemfile and bundle install and rebuild docker:  gem 'riiif', '~> 1.1'    Configure RIIIF in hyrax.rb initializer file  config.iiif_image_server = true    # Returns a URL that resolves to an image provided by a IIIF image server   config.iiif_image_url_builder = lambda do |file_id, base_url, size|     "#{base_url}/downloads/#{file_id.split('/').first}"   end    # Returns a URL that resolves to an info.json file provided by a IIIF image server   config.iiif_info_url_builder = lambda do |_, _|     ""   end    # Returns a URL that indicates your IIIF image server compliance level   config.iiif_image_compliance_level_uri = '    # Returns a IIIF image size default   config.iiif_image_size_default = '600,'    # Fields to display in the IIIF metadata section; default is the required fields   config.iiif_metadata_fields = Hyrax::Forms::WorkForm.required_fields   Add RIIIF initializer file with proper configurations  Riiif::Image.file_resolver = Riiif::HTTPFileResolver.new Riiif::Image.info_service = lambda do |id, _file|   # id will look like a path to a pcdm:file   # (e.g. rv042t299%2Ffiles%2F6d71677a-4f80-42f1-ae58-ed1063fd79c7)   # but we just want the id for the FileSet it's attached to.    # Capture everything before the first slash   fs_id = id.sub(/\A([^\/]*)\/.*/, '\1')   resp = ActiveFedora::SolrService.get("id:#{fs_id}")   doc = resp['response']['docs'].first   raise "Unable to find solr document with id:#{fs_id}" unless doc   { height: doc['height_is'], width: doc['width_is'] } end  Riiif::Image.file_resolver.id_to_uri = lambda do |id|   ActiveFedora::Base.id_to_uri(CGI.unescape(id)).tap do |url|     Rails.logger.info "Riiif resolved #{id} to #{url}"   end end  Riiif::Image.authorization_service = Hyrax::IIIFAuthorizationService  Riiif.not_found_image = Rails.root.join('app', 'assets', 'images', 'us_404.svg') Riiif.unauthorized_image = Rails.root.join('app', 'assets', 'images', 'us_404.svg')  Riiif::Engine.config.cache_duration_in_days = 365   Mount the engine in routes.rb file:  mount Riiif::Engine => 'images', as: :riiif if Hyrax.config.iiif_image_server?