add language tagging to fields (title, description, etc.)
when we migrate items from our digital collections, we'll be encountering (many) items with fields like:  title_english title_japanese title_korean  instead of having additional title fields to handle this, I'd like to be able to leverage language-tagged  RDF literals instead. object.title = [   RDF::Literal('[Kisaeng Beauty]', language: :en),   RDF::Literal('[조선민중풍속 춤추는 미녀기생]', language: :ko) ] Form wise, this should get handled similarly to how we're doing identifiers; ingesting-wise, it's a little unclear. What we might try is:  map the appropriate fields (in this example, titles) to tagged literals, but write the string literal values out  # mapper class Mapper   # ...   def title     writer = RDF::NTriples::Writer.new     (tagged_english_titles + tagged_korean_titles).map do |title|       writer.format_literal(title)     end   end    private    def tagged_english_titles     metadata['title_english'].map do |title|       RDF::Literal(title, language: :en)     end   end    def tagged_korean_titles     metadata['title_korean'].map do |title|       RDF::Literal(title, language: :ko)     end   end end this will let us serialize the values when enqueueing the jobs. then, at some point  iterate through the known fields and parse the literals (maybe at the record importer stage?)  reader = RDF::NTriples::Reader object.title = object.title.map do |title|   reader.parse_literal(title) end