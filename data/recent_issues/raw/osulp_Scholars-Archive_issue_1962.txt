undefined method on works with empty embargo objects
Descriptive summary After debugging issue #1961 that occurs when running bulk updates, it turns out that some existing works (migrated from dspace) contain embargo objects with empty properties causing NoMethodError (undefined method split' for nil:NilClass)` Expected behavior It should skip works with empty embargo objects when available. Actual behavior It raises NoMethodError. Steps to reproduce the behavior  Open the console and do:  $ bundle exec rails c $ > w = ActiveFedora::Base.find("xs55mg65j") $ > w.embargo.embargo_history.first.split('.').first.split(' ').last   It raises error  Traceback (most recent call last):         8: from bin/rails:4:in `<main>'         7: from bin/rails:4:in `require'         6: from /data0/hydra/shared/bundle/ruby/2.5.0/gems/railties-5.0.7.2/lib/rails/commands.rb:18:in `<top (required)>'         5: from /data0/hydra/shared/bundle/ruby/2.5.0/gems/railties-5.0.7.2/lib/rails/commands/commands_tasks.rb:49:in `run_command!'         4: from /data0/hydra/shared/bundle/ruby/2.5.0/gems/railties-5.0.7.2/lib/rails/commands/commands_tasks.rb:78:in `console'         3: from /data0/hydra/shared/bundle/ruby/2.5.0/gems/railties-5.0.7.2/lib/rails/commands/console_helper.rb:9:in `start'         2: from /data0/hydra/shared/bundle/ruby/2.5.0/gems/railties-5.0.7.2/lib/rails/commands/console.rb:65:in `start'         1: from (irb):33 NoMethodError (undefined method `split' for nil:NilClass)  Related work #1961