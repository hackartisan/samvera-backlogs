Fedora3 Adapter Implementation
See: /lib/hyacinth/adapters/preservation_adapter/fedora3.rb We need to implement the persist_impl method, which accepts a location_uri (format will be "fedora3://" + pid) and a digital_object (any subclass of DigitalObject::Base, like DigitalObject::Item or DigitalObject::Asset). The persist_impl should use Rubydora to serialize the digital_object instance to Fedora 3.  Note that the Fedora3 class has instance variables @url, @user, and @password, which should be used to connect to Fedora 3. We also need to implement the generate_new_location_uri so that it mints new pids and returns uris of the format #{self.uri_prefix}#{newly_generated_pid} (i.e. "fedora3://abc:123"). For some minimal serialization requirements to start, it would probably be most useful to be able to create new Fedora objects when the location_uri (/pid) doesn't exist yet, and write to Fedora objects that do already exist.  Let's also write JSON.generate(digital_object.to_serialized_form) to a versioned datastream on these objects with a dsid of hyacinth_data.