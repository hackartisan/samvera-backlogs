startup order: apache should start after solr and fedora
This is a special case of "fix startup order" and "make honeybadger more useful" We fixed startup order for postgres, sidekiq, redis, and apache, and now we need to add solr and fedora to the mix. This is an example of the kind of error we want to eliminate when the system goes down for backups: [Emory laevigata PROD/production] RSolr::Error::ConnectionRefused: Connection refused - {:params=>{:wt=>:ruby, :qt=>:permissions, :id=>"9593tw00h"}, :method=>:get, :query=>"wt=ruby&qt=permissions&id=9593tw00h", :path=>"select", :uri=>#<URI::HTTP http://127.0.0.1:8983/solr/laevigata/select?wt=ruby&qt=permissions&id=9593tw00h>, :open_timeout=>nil, :read_timeout=>nil, :retry_503=>nil, :retry_after_limit=>nil} Backtrace line 26 of [PROJECT_ROOT]/app/models/ability.rb: test_download  View full backtrace and more info at honeybadger.io ACCEPTANCE CRITERIA:   apache starts after fedora  apache starts after solr  this is added to the order_system_services role and that role has been run on all relevant systems