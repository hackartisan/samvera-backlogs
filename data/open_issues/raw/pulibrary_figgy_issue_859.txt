Only leaf nodes navigate to sections in UV index tab
In the PUDL, you could click on any level of the logical structure hierarchy to navigate to that section, e.g., see http://pudl.princeton.edu/viewer.php?obj=gt54kn106&vol=phys1 But now, only the leaf nodes can be clicked on to navigate (the branches just manipulate the hierarchy display), see https://figgy.princeton.edu/catalog/d446107a-bdfd-4a5d-803c-f315b7905bf4 The problem arises when there is no leaf node at the start of a section.  For example, if you have a hierarchy like:  top  chapter 1  plate 2      Then you can navigate to plate 2, but you cannot navigate to the start of chapter 1.  Since we have migrated a large number of existing structmaps from PUDL, there are many items with this problem.
One solution would be to automatically insert a section.  So the hierarchy would look like: * top   * chapter 1     * chapter 1 (auto-inserted)     * plate 2  @joycebcat points out that reusing the parent container's label will work regardless of the language/script being used (as opposed to using a generic term like "start" or "beginning" that would clash with non-English/non-Roman script items).
I don't like that solution. The duplication of the chapter is confusing and a stop-gap measure at best. Is this something that we can fix in the UV? Perhaps something to bring up at UVCon in a few weeks?
Actually, this is configurable on the UV tree via the `BranchNodesConfigurable` property.
@sdellis That would be the best option.  I wasn't able to find anything on the `BranchNodesConfigurable` property with a quick google search.  Is there a demo somewhere?
@escowles Sorry, I got the name wrong. It's `BranchNodesSelectable`. [Here's a list of all possible config properties, and their defaults](https://github.com/UniversalViewer/universalviewer/blob/master/src/extensions/uv-seadragon-extension/config/en-GB.json).   Unfortunately, changes to the `public/uv_config.json` doesn't seem to affect the UV in Figgy. Any trick to this?  At any rate, the config should look like this:  ``` {   "modules":   {     "pagingHeaderPanel":     {       "options":       {         "autoCompleteBoxEnabled": false,         "imageSelectionBoxEnabled": true       }     },     "contentLeftPanel":     {       "options":       {         "defaultToTreeEnabled": true,         "branchNodesSelectable": true       }     }   } } ``` 
Just wanted to update here that I'm able to make other changes to config.json and, after clearing cache, they work. I reported this to Ed Silverton and he's going to look into it tomorrow. Stay tuned!
Ok, it turns out that this is not supported by our gemified UV version. We need to upgrade to v3. Is this something we might be open to?
I think this is the highest viewer-related issue at the moment, so I think it's worth looking at v3.  Do you know if it'll be an easy upgrade?
I think it will be an easy upgrade. Our manifests won't break as it supports Prezi v2 and v3.   However, I'm not at all familiar with how this Rails gem is built. I would like to learn more, but maybe this is a pairing task with @eliotjordan or someone else who is familiar with https://github.com/pulibrary/pul_uv_rails ?
Where can one find version 3? The latest UV release I see is 2.0.2. https://github.com/UniversalViewer/universalviewer/releases
It's the master branch, which is in beta and will be released soon.
Maybe we should wait until it's released? Tagging a released version seems important to me, especially now that Hyrax depends on `pul_uv_rails`. I suppose we could make some dev/beta branches in the various repos for this, but I still feel a little uncomfortable. Also, the UV bower.json on master still refers to itself as being version 2.0.1, which I found confusing.  https://github.com/UniversalViewer/universalviewer/blob/master/bower.json#L3
Maybe we should update master to use UV master, but hold off on doing a release until the UV release happens?  Hyrax depends on `pul_uv_rails ~> 2.0` right now, so updates to master wouldn't impact Hyrax apps.
That sounds reasonable. Hopefully, it's not too difficult to get everything working with V3. We're definitely going to have to update our theme.   https://github.com/UniversalViewer/universalviewer/commit/e403d98f1799619d30a5125c9a6a2ffc1cb094bc#diff-0a08a7565aba4405282251491979bb6b
Would it be better to encourage Ed to release v3 as a "tagged beta release" until it comes out of beta? It will allow us to be able to find and report any bugs to be fixed before it officially drops.
Just wanted to add an update with our current options...  We can add a compiled version of the latest UV into the `public` folder in the Rails apps we want this to work with. The latest viewer has a way to override both CSS and config options to meet our needs.   Do we need anything other than CSS and config overrides @eliotjordan ? How does the Image selection (`.image-selectionbox-options`) dropdown get triggered? Is that a config setting, or did you add code to the UV beyond config/theming? And is there a use case for using that? I have seen it break with long labels, it's generally a poor experience, and this type of thing would be much better suited to Ranges (if at all).  At any rate, if we want to have consistency to UV in multiple apps across the board, we should look at including the compiled code in a `<script>` tag (with local overrides in `public`).    Even better would be to  create a simple [oEmbed](http://jessiekeck.com/2015/05/09/oembed-service-for-digital-library/) service, which would allow us/users to more easily embed the content anywhere and manage UV (and other viewers) from a single place. Happy to pair with a more experienced Rails dev on this if this is the direction we want to go in.  The simplest first step would be to move forward with serving the compiled UV from a single URL and only implementing CSS and config changes, dumping the gem and most likely, the image selection box. I can add this to my todo list if all are üëç on this approach.  
The image selection dropdown box was a config option we turned on a long time ago at @jpstroop's behest. I forget the use case.  We actually used to host UV from a single location. The problem is UV has code so if the viewer itself doesn't come from the domain of the page then it won't update the URL bar, which means you can't pass around a URL for "page 6", for instance. That's why the gem became a thing.
Hmm.. right, good to know. I can do some tests to see if this is an issue anymore (or if there's a workaround). I know that Stanford is able to use it as part of their oEmbed service, but perhaps since it's embedded via an iframe it's not affecting the main URL.
Putting [Stanford's approach](https://github.com/sul-dlss/sul-embed/tree/master/public/uv-3) here for reference.  [Here's a rakefile](https://github.com/sul-dlss/sul-embed/blob/master/lib/tasks/uv.rake) they use to keep UV up-to-date. 
@escowles This issue doesn't seem specific to Figgy, but rather wherever we deploy UV as a viewer. If that's the case, the only solution that makes sense is to implement an oEmbed service. It will be much easier to keep up with the ever-changing UV this way. I don't know where something like that falls in our priorities, who should work on it, or who needs to clear it, but it seems like something we should do soon as we will def. need it for the A/V work too.
Yes, this is going to pop up in Figgy, DPUL, and other applications too.  And we've talked before about oEmbed.  My main questions about implementing an oEmbed service are: 1. How much work is involved? Is this one ticket that takes a couple of hours, or multiple tickets, multiple days, etc.? 2. Would using oEmbed impact the ability to change the browser location bar, and letting users have links to individual pages within the viewer?
I really don't have any idea how much work it is. All I have is Jesse Keck's blogpost and Stanford's sul-embed implementation as reference (linked above). I would be happy to do further research to try to determine how long it would take, and help implement (hopefully paired), but that is up to @kevinreiss and how it impacts what he has planned for me over the next few weeks.  As for sharing links, the UV offers a Share feature that allows people to share the viewer or embed it outside the context of the page. It looks like [Stanford doesn't implement the "share" feature](https://searchworks.stanford.edu/view/sz246gv8396), only embed. When trying to access the viewer via the oEmbed link, I get a 404. There may be a reason/usecase for this and I can follow up with Jack if you want.   In short, UV3 allows sharing, but not by copying and pasting the URL. How does this align with the use case that we need to support?    
@sdellis Uh. So we're updated to UV3 now, is the long and short of this "Update the UV config"?
@tpendragon Yes, this is configurable via the `BranchNodesConfigurable` property.
I tried this out  in staging, and it looks like there is a bug with the `branchNodesSelectable` configuration setting.  I've opened https://github.com/UniversalViewer/universalviewer/issues/606 about that.