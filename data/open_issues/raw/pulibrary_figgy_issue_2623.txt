Document the way we use the scanned resource model for lots of other things and make new change sets
We've been working with this for a while now; do we like it? child of #2691
I like it. There's less boilerplate to get wrong, and it encourages us to not branch on class names. 
down sides:  it's very confusing for people newer to the code, or less familiar with these specific decisions.  It also necessitates special logic to present the right "work type" to the user, and of course serving the right changeset.
Totally.  Do we find Scanned Maps easier to navigate than SimpleResource? 
It also doesn't help that the ChangeSet business is only sort of 3/4 implemented. https://github.com/pulibrary/figgy/blob/e9516685127edcef7382e697aa58e1a343a060f1/app/change_sets/dynamic_change_set.rb#L4-L9 can't last forever.
A couple of things might help.  1. creating architectural decision documentation about this design choice 2. thinking/talking about it as a "resource type" which *drives* the change set selection rather than a bunch of things with the same model but different change sets. Maybe even changing the stored `change_set` property to use a different property name.  It might also be useful to document the vectors of difference between the "resource type" use cases. I know we have 1. Whether or not it imports metadata 2. What is presented on the form 3. Whether or not it publishes a manifest / allows structural editing 4. whether or not it supports fields with controlled vocabularies  what else? To what extent are these qualities available to be used via multiple inheritance (mixins) or injection in order to easily create resources for existing and new use cases?  To some extent this is a different tangent, but perhaps thinking it out a little would help us figure out the direction we should be heading in with respect to the current question.
We'll continue in this direction for now. To close this ticket, improve documentation: - Architectural overview in the form of a wiki page on this repository. Make sure to include info about what to do when writing features for a new material type/ingest workflow.