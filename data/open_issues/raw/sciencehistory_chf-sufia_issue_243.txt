nested attributes added twice
The form is submitting correctly. The attributes are added twice to the model object, then indexed that way. It's only in fedora once. If you edit the object again and save without changing anything it is fixed.
''' From: /usr/local/lib/ruby/gems/2.2.0/gems/curation_concerns-1.6.3/app/actors/curation_concerns/actors/base_actor.rb @ line 22 CurationConcerns::Actors::BaseActor#update:      18: def update(attributes)     19:   binding.pry     20:   apply_update_data_to_curation_concern     21:   apply_save_data_to_curation_concern(attributes)  => 22:   next_actor.update(attributes) && save && run_callbacks(:after_update_metadata)     23: end  [13] pry(#<CurationConcerns::Actors::GenericWorkActor>)> curation_concern.additional_credit_ids => ["9a30c815-299c-4cad-bf18-dd1854a82f14", "e4b79b48-50c7-4a5f-be21-40d9efdaa103", "356a3b62-322f-471e-8c7f-215aef6f062e"] [14] pry(#<CurationConcerns::Actors::GenericWorkActor>)> curation_concern.additional_credit => [#<Credit id: "9a30c815-299c-4cad-bf18-dd1854a82f14", role: "photographer", name: "Douglas Lockard", label: "Photographed by Douglas Lockard">, #<Credit id: "e4b79b48-50c7-4a5f-be21-40d9efdaa103", role: "photographer", name: "Gregory Tobias", label: "Photographed by Gregory Tobias">, #<Credit id: "356a3b62-322f-471e-8c7f-215aef6f062e", role: "photographer", name: "Mark Backrath", label: "Photographed by Mark Backrath">, #<Credit id: nil, role: "photographer", name: "Penn School of Medicine", label: nil>] '''
The value is being added twice to solr, not to the object itself. This is intermittent, only happens the first time you add the value. e.g. if I go back and edit the object but don't change anything, just save, it is indexed correctly. If I add 3 or 4 at a time then only the last one is added twice.
slowly slowly narrowing this down.. it's happening during actor.create / actor.update (I suspect they're calling the same code)
here is where the nested attribute object is actually created   ``` From: /home/ubuntu/.bundle/ruby/2.2.0/curation_concerns-b073550c40a1/app/actors/curation_concerns/actors/base_actor.rb @ line 14 CurationConcerns::Actors::BaseActor#create:      11: def create(attributes)     12:   @cloud_resources = attributes.delete(:cloud_resources.to_s)     13:   apply_creation_data_to_curation_concern  => 14:   apply_save_data_to_curation_concern(attributes)     15:   next_actor.create(attributes) && save && run_callbacks(:after_create_concern)     16: end  [68] pry(#<CurationConcerns::Actors::GenericWorkActor>)> curation_concern.additional_credit => [] [69] pry(#<CurationConcerns::Actors::GenericWorkActor>)> next  From: /home/ubuntu/.bundle/ruby/2.2.0/curation_concerns-b073550c40a1/app/actors/curation_concerns/actors/base_actor.rb @ line 15 CurationConcerns::Actors::BaseActor#create:      11: def create(attributes)     12:   @cloud_resources = attributes.delete(:cloud_resources.to_s)     13:   apply_creation_data_to_curation_concern     14:   apply_save_data_to_curation_concern(attributes)  => 15:   next_actor.create(attributes) && save && run_callbacks(:after_create_concern)     16: end  [69] pry(#<CurationConcerns::Actors::GenericWorkActor>)> curation_concern.additional_credit => [#<Credit id: nil, role: "photographer", name: "Douglas Lockard", label: nil>] ```
further down the stack i see a single entry in additional_credit:  ``` From: /usr/local/lib/ruby/gems/2.2.0/gems/active-fedora-10.3.0/lib/active_fedora/associations/builder/orders.rb @ line 43 ActiveFedora::Associations::Builder::Orders::FixFirstLast#save:      40: def save(*args)     41:   binding.pry     42:   super.tap do |result|  => 43:     apply_first_and_last if result     44:   end     45: end  [24] pry(#<GenericWork>)> result => true [25] pry(#<GenericWork>)> @association_cache[:additional_credit_ids].owner.additional_credit => [#<Credit id: "95587eb1-5997-4d2b-af84-667db146163a", role: "photographer", name: "Douglas Lockard", label: "Photographed by Douglas Lockard">] ```
I'm a bit lost in this debugging but I think the issue might be somewhere in a callback. the callback stack is seemingly impermeable to debug navigation.  I could put debug calls in each method invoked by a callback and maybe i'll try to do that.  Otherwise I've learned enough that I can write a failing test and then try addressing it locally (just delete any duplicated entries) via the actor stack.
debugging with an inscription. after the inscription is saved / indexed, something called a GeneratedResourceSchema is saved / indexed. this is when the duplicated inscription appears (i observe it via the solr console directly so you don't see it in the debugging below). It's in the callback stack and here's some debug tracing to bookmark it for later. I'm going to stop this line of investigation now and try to just patch the behavior, then later maybe try to replicate in an upstream context.  ```  From: /usr/local/lib/ruby/gems/2.2.0/gems/active-fedora-10.3.0/lib/active_fedora/indexing.rb @ line 66 ActiveFedora::Indexing#_create_record:      63: def _create_record(options = {})     64:   super     65:   update_index if create_needs_index? && options.fetch(:update_index, true)  => 66:   true     67: end  [40] pry(#<Inscription>)> next  From: /usr/local/lib/ruby/gems/2.2.0/gems/activesupport-4.2.7.1/lib/active_support/callbacks.rb @ line 118 ActiveSupport::Callbacks::Filters::End#call:      115: def call(env)     116:   block = env.run_block     117:   env.value = !env.halted && (!block || block.call)  => 118:   env     119: end  [40] pry(#<ActiveSupport::Callbacks::Filters::End>)> block => #<Proc:0x007fcb6478ea60@/usr/local/lib/ruby/gems/2.2.0/gems/active-fedora-10.3.0/lib/active_fedora/callbacks.rb:240> [41] pry(#<ActiveSupport::Callbacks::Filters::End>)> show-source block  From: /usr/local/lib/ruby/gems/2.2.0/gems/active-fedora-10.3.0/lib/active_fedora/callbacks.rb  Number of lines: 1  _run_create_callbacks { super } [42] pry(#<ActiveSupport::Callbacks::Filters::End>)> show-source -s Error: No superclass found for #<Method: ActiveSupport::Callbacks::Filters::End#call> [43] pry(#<ActiveSupport::Callbacks::Filters::End>)> next  From: /usr/local/lib/ruby/gems/2.2.0/gems/activesupport-4.2.7.1/lib/active_support/callbacks.rb @ line 506 ActiveSupport::Callbacks::CallbackSequence#call:      503: def call(*args)     504:   @before.each { |b| b.call(*args) }     505:   value = @call.call(*args)  => 506:   @after.each { |a| a.call(*args) }     507:   value     508: end  [43] pry(#<ActiveSupport::Callbacks::CallbackSequence>)> curation_concern NameError: undefined local variable or method `curation_concern' for #<ActiveSupport::Callbacks::CallbackSequence:0x007fcb64766c18> from (pry):36:in `call' [44] pry(#<ActiveSupport::Callbacks::CallbackSequence>)> value => #<struct ActiveSupport::Callbacks::Filters::Environment  target=#<Inscription id: "c8d306de-f7aa-4260-9902-4148a1f8d7aa", location: "il", text: "lkj">,  halted=false,  value=true,  run_block=#<Proc:0x007fcb6478ea60@/usr/local/lib/ruby/gems/2.2.0/gems/active-fedora-10.3.0/lib/active_fedora/callbacks.rb:240>> [45] pry(#<ActiveSupport::Callbacks::CallbackSequence>)> next  From: /usr/local/lib/ruby/gems/2.2.0/gems/active-fedora-10.3.0/lib/active_fedora/persistence.rb @ line 237 ActiveFedora::Persistence#save_contained_resources:      235: def save_contained_resources     236:   contained_resources.changed.each do |_, resource|  => 237:     resource.save     238:   end     239: end  [45] pry(#<GenericWork>)> resource => #<GenericWork::GeneratedResourceSchema:0x3fe5b94f6f94(#<GenericWork::GeneratedResourceSchema:0x007fcb729edf28>)> [46] pry(#<GenericWork>)> _ => #<GenericWork::GeneratedResourceSchema:0x3fe5b94f6f94(#<GenericWork::GeneratedResourceSchema:0x007fcb729edf28>)> [47] pry(#<GenericWork>)> next  From: /usr/local/lib/ruby/gems/2.2.0/gems/active-fedora-10.3.0/lib/active_fedora/persistence.rb @ line 177 ActiveFedora::Persistence#_update_record:      173: def _update_record(_options = {})     174:   serialize_attached_files     175:   execute_sparql_update     176:   save_contained_resources  => 177:   refresh     178: end  [47] pry(#<GenericWork>)> next  From: /usr/local/lib/ruby/gems/2.2.0/gems/active-fedora-10.3.0/lib/active_fedora/indexing.rb @ line 72 ActiveFedora::Indexing#_update_record:      70: def _update_record(options = {})     71:   super  => 72:   update_index if update_needs_index? && options.fetch(:update_index, true)     73:   true     74: end  [47] pry(#<GenericWork>)> update_needs_index? => true [48] pry(#<GenericWork>)> next   Load LDP (25.5ms) http://127.0.0.1:8080/fedora/rest/dev/cn/69/m4/17/cn69m417n Service: 70256044278280  From: /usr/local/lib/ruby/gems/2.2.0/gems/active-fedora-10.3.0/lib/active_fedora/indexing.rb @ line 73 ActiveFedora::Indexing#_update_record:      70: def _update_record(options = {})     71:   super     72:   update_index if update_needs_index? && options.fetch(:update_index, true)  => 73:   true     74: end  [48] pry(#<GenericWork>)>  ```  I don't remember exactly where I called the debugger and I since deleted it while starting to try something else. possibly in active_fedora/persistence.rb#save
28a507d implements a workaround and I'm therefore removing the 'blocker' label. Moving forward, the next step is to replicate this in a test somewhere down the stack, maybe active fedora.
todo: see if the fix for #264 also resolved this. update: it did not.