Collection facet
Two thoughts on this.  I think some functionality in this area is written into Sufia and maybe never turned on. I know Lynette was working on some related stuff. Check 7.x release notes. The collections relationship flips in cc2, but I don't expect we will be migrated to that before soft launch. However, I think that flip will make this facet pretty easy to achieve since the collection relationship will be stored on the work already.
I'm not sure if we're on CC2 yet.   We could hypothetically do this by having the custom indexer call `in_collections` on each work, and indexing that into a facet. But calling `in_collections` on a work seems to be EXTREMELY slow.  I think this would slow down indexing enormously -- and also might slow down ordinary operation of the app, as every time you saved a record it has to index it.   Is it something related to that that is expected to be solved in a future CC version a? And is the sufia upgrade that's in progress going to give us such a CC version?
We are not on CC2; there isn't technically a cc2 release; it never came out of rc. There's no migration script for getting from cc 1.7 to cc2.  With the Sufia 7.3 upgrade PR I've included upgrade to Active Fedora 11, which I believe should give some performance improvements on in_collections, but the real solution is to get on cc (or hyrax, which is based on cc2).
So... should we do anything on this in the near or medium term future? We def aren't going to be on hyrax before soft launch, right? Plan/need to do anything on this before soft launch? 
(we prob _could_ hack things to store collections in a more efficient way, sync them on the object with wherever the heck they are stored according to the framework using an AF model hook). 
Migration task in   Based on work to change direction of collection association in 
The set of differences between cc 1.7.6 and master (soon-to-be-2) is pretty small:  ```  - [master] Merge pull request #1176 from projecthydra/fix-roles-spec   + [master^2] Fix intermittently failing view spec   + [master^^2] travis: run redis during tests   + [master^^2^] jobs: lock FileSets while attaching Files   + [master~2^2] Removing an exclusion for a non-existent file   + [master~3^2] Update the default workflow to allow_access_grants   + [master~5^2] Preserve additional editors when creating works   + [master~11^2] Better error message for an etag conflict   + [master~18^2] Change ActiveFedora dependency to disallow 10.3.0-rc*   + [master~20^2] Index the file size as a long. Fixes #1117   + [master~22^2] Bump version to 2.0.0 RC1   + [master~25^2] Fix documentation   + [master~26^2] Remove dead code   + [master~27^2] Moving member_of_collection_presenters check to parent view   + [master~27^2^] Addressing code review comments   + [master~27^2~2] Reversing membership to improve performance: Works now use member_of_collections to link to Collections  ```
awesome, that's encouraging. Looks like it's mostly just bugfixes, and the change we want to invert the collection member relationship? Sweet. 
apparently a way to do this was introduced in sufia 6.5.0. I never ran the generator because I wasn't focused on facets at the time at all; I guess I figured I could always run it later. 
i wonder if it'll lead to super slow index/save times, using the 'wrong direction' association. Something to watch out for if we play with it.   Funny that nobody in slack remembered this was a thing when I was asking about collection facet in pre-CC2.0 association invert. 
the addition of this feature to 6.5.0 seems to be a self-contained commit, haven't looked at it to understand what it's doing yet 
Interesting. I say let's definitely wait to look at it, since it didn't seem clear there were concrete use cases for the collection facet and the code differences between sufia 6 and sufia 7 are quite significant in some areas.
Today we discussed the possibility of adding the facet bar that appears on search results pages to the Collections pages, which would meet the use case of allowing users to browse within a collection. This might be easier than making a Collections facet. Discuss use cases and revisit how best to answer them.