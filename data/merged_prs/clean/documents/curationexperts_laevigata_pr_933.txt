Etd migration
Introduces a Fedora 3 migration tool intended for a one-time migration from Emory's legacy ETD repository to laevigata. The tool is based on darlingtonia; the docs for that project will be a useful reference in understanding the information below. The entry point for the tool is a rake task at emory:migrate_etds. This task consumes a line-oriented file containing Fedora 3 'pids' for migration. It downloads the archival FOXML and related resources, extracted from the RELS-EXT datastream and maps them into Etd and Hyrax::UploadedFile objects which are run through a slightly customized actor stack. The retrieval, mapping, and actor work takes place in an Importer::MigrationImportJob which is queued into migration by default. To run the migration do: RAILS_ENV=production bundle exec rake emory:migrate_etds[path/to/import_pids.txt] RAILS_ENV=production nohup bundle exec sidekiq -q migration -c 5 & The workers can (and probably should) run on different hardware from the web server. Ensure they connect to the same SQL database, redis, fcrepo4, & solr as the production system. The workers will create records in each of these, including queuing new AttachFileToWorkJob, derivative generation, and characterization jobs which will run.  Mapping is handled by Importer::MigrationMapper, which transparently retrieves and caches archival FOXML and other required Fedora 3 content (e.g. MADS Author Info). Datastreams are Base64 decoded and interpreted as needed. This mapper is powered by lightweight RepositoryObject and Datastream implementations. The MigrationImportJob performs some cleanup on the mapped attributes, and reaches into the InputRecord#mapper to find primary and supplemental files. A dummy user is created with the provided email and creator name to be the depositor on each created object. The customized actor stack places all objects into the default AdminSet, routing around the approval workflows, and sets embargoes from an embargo_lift_date set by the mapper. The usual post-create jobs are enqueued in the process of running through the stack.