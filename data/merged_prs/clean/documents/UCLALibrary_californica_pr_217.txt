Logging refactor
This is a large-ish refactor to remove a side effect from Californica::Importer#initialize. Setting the global Darlingtonia.config within the initializer caused logging/error behavior in collaborator classes to depend on whether an instance of this integrative class had been instantiated. Combined with the use of non-standard Darlingtonia stream methods, this caused NoMethodError to be raised depending on test order. This was a symptom of an underlying fragility which this work aims to shore up. Under other circumstances, we could have simply moved the stream configuration to a global initializer, and set it once. However, we want to name the log files with a present timestamp. Doing so requires that we set the loggers from within the importer instance. To avoid doing this globally, we pass the stream instances to their various users directly. Darlingtonia::RecordImporter already supports this behavior, but this is the first time we have implemented high level logging at the Importer/Parser levels. This is reflected in the scope of these changes. First, we refactor to use a standardized Darlingtonia message stream (CalifornicaLogStream). This stream wraps a logger, but avoids widening its API footprint to match. Then we transition calls from the globally configured MessageStream instances to the locally defined CalifornicaLogStream instances. These two loggers co-exist temporarily in several commits, writing to the same files. This process involved opening up the Parser initializer to give it access to the error streams without reading directly from the global config. Once all the calls are moved, we yank the now dead MessageStream code.